## Run with a a working scipy stack (such as Anaconda)
"""
This script draws plots for the *_stats.yaml files generated by the StatsLogger

Usage: ipython draw_plots.py [statsfile]
"""

import yaml, scipy, pylab, sys
import matplotlib.pyplot as plt
from scipy import signal
from matplotlib.font_manager import FontProperties

smoothed = True
WindowSize = 5

Gaussian = scipy.signal.gaussian(WindowSize, 2)
Gaussian = Gaussian / sum(Gaussian)
fontP = FontProperties()
fontP.set_size('small')

def make_graphs(filein, fileout):
	stats = yaml.load(file(filein, 'r'))
	perRoundStats = [['Turns per round', 'Time per round'], ['Created nodes per round', 'Cumulative nodes per round'], ['Pulses per round']]
	for i, subset in enumerate(perRoundStats):
		plt.subplot(len(perRoundStats), 1, i + 1)
		for pr in subset:
			plot = stats[pr]
			if i == 0 and smoothed: plot = pylab.convolve(plot, Gaussian, 'same')
			plt.plot(plot, label=pr) # drawstyle = 'steps'
		plt.xlabel('Round')
		plt.legend(prop = fontP)
	if fileout == 'show': plt.show()
	else: plt.savefig(fileout)
	

if __name__ == '__main__':
	if len(sys.argv) <= 1:
		make_graphs('test.yaml', 'show')
	else:
		infile = sys.argv[1]
		outfile = ".".join(infile.split('.')[0:-1] + ['png'])
		make_graphs(infile, outfile)