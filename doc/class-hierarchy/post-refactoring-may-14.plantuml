@startuml
class Reactive {
  +var level: Int
  +val timestamps: Buffer[Stamp]
}

class DepHolder {
  +val dependents: Buffer[Dependent]
  __
  +addDependent(Dependent)
  +removeDependent(Dependent)
  +notifyDependents(Any)
}
Reactive <|-- DepHolder

class Dependent {
  +val dependOn: Buffer[DepHolder]
  __
  +addDependOn(DepHolder)
  +removeDependOn(DepHolder)
  +dependsOnchanged(Any, DepHolder)
  #triggerReevaluation()
}
Reactive <|-- Dependent

class "ReactiveValue[+T]" as ReactiveValue {
  +getValue(): T
  +apply(): T
  +apply(SignalSynt[_]): T
  #reEvaluate(): T
}
DepHolder <|-- ReactiveValue

class "Var[T]" as Var {
  __
  +setValue(T): Unit
  +update(T)
  +toSignal(): Signal[T]
}
ReactiveValue <|-- Var

class "Signal[+T]" as Signal {
  __
  +snapshot(Event[_]): Signal[T]
  +switchTo[U >: T](Event[U]): Signal[U]
  +switchOnce[V >: T](Event[_])(Signal[V]): Signal[V]
  +toggle[V >: T](Event[_])(Signal[V])
  +delay(Int): Signal[T]
}
Dependent <|-- Signal
ReactiveValue <|-- Signal

class "Event[+T]" as Event {
  __
  ++=(T => Unit)
  +-=(T => Unit)
  +||(Event)
  +&&(Event)
  +filter[U >: T](U => Boolean): Event[U]
  +\\\[U >: T](Event[U]): Event[U]
  +map[U, S >: T](S => U): Event[U]
  ..
  rest omitted ...
}
DepHolder <|-- Event

class "FoldableReactive[+A]" as FoldableReactive {
  __
  + {abstract} fold[B](B)((B, A) => B): ReactiveValue[B]
  ..
  +iterate[B](B)(f: B => B): ReactiveValue[B]
  +count(): ReactiveValue[Int]
  +latestOption(): ReactiveValue[Option[A]]
  +list(): ReactiveValue[Seq[A]]
  +last(Int): ReactiveValue[Seq[A]]
}

class "Changing[+T]" as Changing {
  +lazy val change: Event[T,T]
  +lazy val changed: Event[T]
  __
  +def changedTo[V](value: V): Event[Unit]
}
Changing <|-- ReactiveValue

class Signal << (T,#4682b4) >>
class Var << (T,#4682b4) >>
class DepHolder << (T,#4682b4) >>
class Dependent << (T,#4682b4) >>
class Reactive << (T,#4682b4) >>
class Event << (T,#4682b4) >>
class ReactiveValue << (T,#4682b4) >>
class Changing << (T,#4682b4) >>
class FoldableReactive << (T,#4682b4) >>
@enduml